// script.js
// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è JavaScript –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è iOS Safari

console.log('üöÄ Script loaded successfully!');
// —É–º–µ–Ω—å—à–∏–ª –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ

// –≠–ª–µ–º–µ–Ω—Ç—ã
const stripTrack = document.querySelector('.strip-track');
let animationId = null;
let position = 0;
const speed = 0.35; // —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 30%
let isRunning = false;
let isPaused = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–∞–π–ø–∞
let isDragging = false;
let startX = 0;
let startPosition = 0;
let lastTouchTime = 0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
let shuffledPhotoOrder = [];
let currentPhotoIndex = 0;

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–æ–¥–∞–ª–∫–∏ ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
let isModalNavigating = false;

// –ú–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
const photoSources = [
  'assets/webp/photo1.webp',
  'assets/webp/photo2.webp',
  'assets/webp/photo3.webp',
  'assets/webp/photo4.webp',
  'assets/webp/photo5.webp',
  'assets/webp/photo6.webp',
  'assets/webp/photo7.webp',
  'assets/webp/photo8.webp'
];

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates)
function shuffleArray(array) {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// === Dynamic photos via manifest (override) ===
let photosManifest = [];

async function loadPhotosManifest() {
  try {
    const res = await fetch('assets/photos.json');
    photosManifest = await res.json();
    console.log('üìÅ photos.json loaded:', photosManifest.length);
  } catch (e) {
    console.error('Failed to load photos.json', e);
    photosManifest = [];
  }
}

// –ü–æ–º–æ—â–Ω–∏–∫: –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤—ã—Ö –ø—Ä–µ–≤—å—é –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
function startAfterImagesReady() {
  const imgs = Array.from(stripTrack.querySelectorAll('img'));
  if (imgs.length === 0) return;
  const sample = imgs.slice(0, Math.min(5, imgs.length));
  const waiters = sample.map(img => img.complete ? Promise.resolve() : new Promise(res => {
    img.addEventListener('load', res, { once: true });
    img.addEventListener('error', res, { once: true });
  }));
  Promise.race(waiters).then(() => {
    position = 0;
    stripTrack.style.transform = 'translateX(0px)';
    if (isRunning) {
      isRunning = false;
      cancelAnimationFrame(animationId);
    }
    startAnimation();
  });
}

// IntersectionObserver –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
const visibleObserver = 'IntersectionObserver' in window ? new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    const el = entry.target;
    if (entry.isIntersecting) {
      el.classList.add('is-visible');
      visibleObserver.unobserve(el);
    }
  });
}, { rootMargin: '200px 0px', threshold: 0.01 }) : null;

function buildStripFromShuffled() {
  if (!Array.isArray(shuffledPhotoOrder) || shuffledPhotoOrder.length === 0) return;
  const uniqueCount = shuffledPhotoOrder.length;
  const duplicated = [...shuffledPhotoOrder, ...shuffledPhotoOrder];

  // Clear and build
  stripTrack.innerHTML = '';
  duplicated.forEach((photo, i) => {
    const img = document.createElement('img');
    img.src = photo.thumb; // –±–∞–∑–æ–≤—ã–π src ‚Äî –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
    img.alt = photo.id || `Photo ${i + 1}`;
    img.dataset.idx = String(i % uniqueCount);

    // –£–ª—É—á—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–∫–∞—á–µ—Å—Ç–≤–∞
    img.loading = 'lazy';
    img.decoding = 'async';
    img.width = 170;
    img.height = 240;
    img.srcset = `${photo.thumb} 1x, ${photo.thumb} 2x`;
    img.sizes = '(max-width: 600px) 36vw, (max-width: 900px) 22vw, 170px';

    // Fade-in –∫–ª–∞—Å—Å
    img.classList.add('fade-in');
    if (visibleObserver) visibleObserver.observe(img);

    img.addEventListener('click', () => {
      if (isDragging || isModalNavigating) return;
      currentPhotoIndex = Number(img.dataset.idx);
      showPhoto(currentPhotoIndex);
    });

    stripTrack.appendChild(img);
  });

  startAfterImagesReady();
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
function preloadNeighbors(index) {
  if (!shuffledPhotoOrder || shuffledPhotoOrder.length === 0) return;
  const prev = Math.max(0, index - 1);
  const next = Math.min(shuffledPhotoOrder.length - 1, index + 1);
  [prev, next].forEach(i => {
    const img = new Image();
    img.decoding = 'async';
    img.loading = 'lazy';
    img.src = shuffledPhotoOrder[i].full;
  });
}

// Override shufflePhotos to use manifest
function shufflePhotos() {
  if (!photosManifest || photosManifest.length === 0) {
    console.warn('No manifest yet, skipping shuffle');
    return;
  }
  shuffledPhotoOrder = shuffleArray(photosManifest);
  buildStripFromShuffled();
  console.log('üîÄ Shuffled', shuffledPhotoOrder.length, 'photos, trackWidth:', stripTrack.scrollWidth);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ç–æ –≤ –º–æ–¥–∞–ª–∫–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º decode() –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async function showPhoto(index) {
  if (!shuffledPhotoOrder || shuffledPhotoOrder.length === 0) return;
  if (isModalNavigating) return; // –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö —Å–≤–∞–π–ø–æ–≤/–∫–ª–∏–∫–æ–≤
  const max = shuffledPhotoOrder.length;
  if (index < 0) index = 0;
  if (index > max - 1) index = max - 1;
  currentPhotoIndex = index;
  const photo = shuffledPhotoOrder[index];
  if (!photo) return;

  isModalNavigating = true;
  try {
    const tmp = new Image();
    tmp.decoding = 'async';
    tmp.src = photo.full;
    if (typeof tmp.decode === 'function') {
      await tmp.decode().catch(() => {});
    } else {
      await new Promise(res => tmp.onload = res);
    }
    photoModalImg.decoding = 'async';
    photoModalImg.loading = 'eager';
    photoModalImg.src = photo.full;
    photoModal.classList.add('active');
    updateNavigationButtons();
    showNavigationButtons();
    preloadNeighbors(index);
    pauseAnimation(); // –Ω–∞ –≤—Ä–µ–º—è –º–æ–¥–∞–ª–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã
  } finally {
    // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≥–ª–æ—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø
    setTimeout(() => { isModalNavigating = false; }, 120);
  }
}

// Init manifest flow
(async () => {
  await loadPhotosManifest();
  if (photosManifest.length > 0) {
    const run = () => shufflePhotos();
    if ('requestIdleCallback' in window) {
      requestIdleCallback(run, { timeout: 500 });
    } else {
      setTimeout(run, 0);
    }
  }
})();

// –§–æ–ª–±—ç–∫ –µ—Å–ª–∏ –ª–µ–Ω—Ç–∞ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∞—Å—å
function ensureStripPopulated() {
  setTimeout(async () => {
    if (!stripTrack) return;
    if (stripTrack.children.length === 0) {
      console.warn('‚ö†Ô∏è Strip is empty, retrying manifest load...');
      if (!photosManifest || photosManifest.length === 0) {
        await loadPhotosManifest();
      }
      if (photosManifest && photosManifest.length > 0) {
        shuffledPhotoOrder = shuffleArray(photosManifest);
        buildStripFromShuffled();
      }
    }
  }, 800);
}

document.addEventListener('DOMContentLoaded', () => {
  ensureStripPopulated();
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º iOS –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤–∫–ª—é—á–∞—è Chrome –Ω–∞ iOS)
const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) || 
              (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
const isChromeiOS = navigator.userAgent.includes('CriOS');
const isSafariiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !navigator.userAgent.includes('CriOS');

console.log('üçé iOS detected:', isIOS);
console.log('üì± Mobile detected:', isMobile);
console.log('üåê Chrome iOS:', isChromeiOS);
console.log('üß≠ Safari iOS:', isSafariiOS);

// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
function logScreenDiagnostics() {
  const diagnostics = {
    screenWidth: screen.width,
    screenHeight: screen.height,
    screenAvailWidth: screen.availWidth,
    screenAvailHeight: screen.availHeight,
    windowInnerWidth: window.innerWidth,
    windowInnerHeight: window.innerHeight,
    windowOuterWidth: window.outerWidth,
    windowOuterHeight: window.outerHeight,
    visualViewportWidth: window.visualViewport ? window.visualViewport.width : '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
    visualViewportHeight: window.visualViewport ? window.visualViewport.height : '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
    orientation: window.orientation || '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
    orientationAngle: screen.orientation ? screen.orientation.angle : '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
    devicePixelRatio: window.devicePixelRatio,
    userAgent: navigator.userAgent,
    documentElementWidth: document.documentElement.clientWidth,
    documentElementHeight: document.documentElement.clientHeight,
    bodyWidth: document.body ? document.body.clientWidth : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
    bodyHeight: document.body ? document.body.clientHeight : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
  };
  console.log('üìä === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–ó–ú–ï–†–û–í –≠–ö–†–ê–ù–ê ===');
  console.table(diagnostics);
}
logScreenDiagnostics();

// –ü—Ä–æ—Å—Ç–∞—è JavaScript –∞–Ω–∏–º–∞—Ü–∏—è
function animate() {
  if (!isRunning || isPaused || isDragging) return;
  position -= speed;
  const singleWidth = stripTrack.scrollWidth / 2; // —à–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª + –¥—É–±–ª–∏)
  if (position <= -singleWidth) {
    position += singleWidth; // –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –±–µ–∑ —Ä—ã–≤–∫–∞
  }
  stripTrack.style.transform = `translate3d(${position}px, 0, 0)`;
  animationId = requestAnimationFrame(animate);
}

function startAnimation() {
  if (isRunning) return;
  isRunning = true;
  isPaused = false;
  console.log('‚ñ∂Ô∏è Animation started');
  animate();
}

function pauseAnimation() {
  isPaused = true;
  console.log('‚è∏Ô∏è Animation paused');
}

function resumeAnimation() {
  if (!isRunning) return;
  isPaused = false;
  console.log('‚ñ∂Ô∏è Animation resumed');
  animate();
}

// Touch —Å–æ–±—ã—Ç–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è iOS
stripTrack.addEventListener('touchstart', (e) => {
  console.log('üñêÔ∏è Touch start');
  isDragging = true;
  startX = e.touches[0].clientX;
  startPosition = position;
  lastTouchTime = Date.now();
  pauseAnimation();
}, { passive: false });

stripTrack.addEventListener('touchmove', (e) => {
  if (!isDragging) return;
  const currentTime = Date.now();
  const timeDelta = currentTime - lastTouchTime;
  if (timeDelta < 16) return; // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ ~60fps
  const currentX = e.touches[0].clientX;
  const deltaX = currentX - startX;
  const absDeltaX = Math.abs(deltaX);
  if (absDeltaX > 10) {
    e.preventDefault();
  }
  // –ª—ë–≥–∫–∏–π clamp —Å–∫–æ—Ä–æ—Å—Ç–∏
  const maxStep = 40; // px –∑–∞ —Ç–∏–∫
  const step = Math.max(-maxStep, Math.min(maxStep, deltaX));
  position = startPosition + step;
  stripTrack.style.transform = `translateX(${position}px)`;
  lastTouchTime = currentTime;
}, { passive: false });

stripTrack.addEventListener('touchend', (e) => {
  console.log('üëã Touch end');
  isDragging = false;
  const trackWidth = stripTrack.scrollWidth / 2;
  if (position >= trackWidth) {
    position -= trackWidth;
  } else if (position <= -trackWidth) {
    position += trackWidth;
  }
  const resumeDelay = isIOS ? 100 : 200;
  setTimeout(() => {
    resumeAnimation();
  }, resumeDelay);
}, { passive: false });

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö scrolls –Ω–∞ iOS
if (isIOS) {
  document.addEventListener('touchmove', (e) => {
    if (e.target.closest('.strip-track')) {
      e.preventDefault();
    }
  }, { passive: false });
}

// –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é
const burger = document.getElementById('burger-menu');
const mobileMenu = document.getElementById('mobile-menu');

if (burger && mobileMenu) {
  burger.addEventListener('click', () => {
    console.log('üçî Burger menu clicked');
    mobileMenu.classList.toggle('active');
  });
  mobileMenu.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
      console.log('üîó Mobile menu link clicked:', link.textContent);
      mobileMenu.classList.remove('active');
    });
  });
}

const closeMenuBtn = document.getElementById('close-menu');
if (closeMenuBtn && mobileMenu) {
  closeMenuBtn.addEventListener('click', () => {
    console.log('‚ùå Close menu clicked');
    mobileMenu.classList.remove('active');
  });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ
const photoModal = document.getElementById('photo-modal');
const photoModalImg = document.getElementById('photo-modal-img');
const photoModalClose = document.getElementById('photo-modal-close');
const photoModalPrev = document.getElementById('photo-modal-prev');
const photoModalNext = document.getElementById('photo-modal-next');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
let currentPhotoSrc = '';
let touchStartX = 0;
let touchStartY = 0;
let navigationTimeout = null;

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ—Ç–æ ‚Äî –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è)
stripTrack.addEventListener('click', (e) => {
  const img = e.target.closest('img');
  if (!img || isDragging || isModalNavigating) return;
  const idx = Number(img.dataset.idx);
  if (!Number.isFinite(idx)) return;
  showPhoto(idx);
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateNavigationButtons() {
  photoModalPrev.style.display = 'flex';
  photoModalNext.style.display = 'flex';
  startNavigationTimer();
}

function startNavigationTimer() {
  if (navigationTimeout) {
    clearTimeout(navigationTimeout);
  }
  navigationTimeout = setTimeout(() => {
    hideNavigationButtons();
  }, 2000);
}

function hideNavigationButtons() {
  photoModalPrev.style.opacity = '0';
  photoModalNext.style.opacity = '0';
}

function showNavigationButtons() {
  photoModalPrev.style.opacity = '1';
  photoModalNext.style.opacity = '1';
  startNavigationTimer();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–æ–¥–∞–ª–∫–∏
photoModalPrev.addEventListener('click', (e) => {
  e.stopPropagation();
  if (isModalNavigating) return;
  if (currentPhotoIndex > 0) {
    showPhoto(currentPhotoIndex - 1);
  }
});

photoModalNext.addEventListener('click', (e) => {
  e.stopPropagation();
  if (isModalNavigating) return;
  if (shuffledPhotoOrder && currentPhotoIndex < shuffledPhotoOrder.length - 1) {
    showPhoto(currentPhotoIndex + 1);
  }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
function closePhotoModal() {
  photoModal.classList.remove('active');
  photoModalImg.src = '';
  clearTimeout(navigationTimeout);
  // –í–æ–∑–æ–±–Ω–æ–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é –ª–µ–Ω—Ç—ã —á—É—Ç—å –ø–æ–∑–∂–µ
  setTimeout(() => resumeAnimation(), 0);
}

photoModalClose.addEventListener('click', (e) => {
  e.stopPropagation();
  closePhotoModal();
});

// –ù–∞–¥—ë–∂–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º touch/pointer
const handleModalCloseTap = (e) => {
  e.preventDefault();
  e.stopPropagation();
  closePhotoModal();
};
if (photoModalClose) {
  photoModalClose.addEventListener('touchend', handleModalCloseTap, { passive: false });
  photoModalClose.addEventListener('pointerup', handleModalCloseTap, { passive: false });
}

photoModal.addEventListener('click', (e) => {
  if (e.target === photoModal) {
    closePhotoModal();
  }
});

document.addEventListener('keydown', (e) => {
  if (!photoModal.classList.contains('active')) return;
  if (e.key === 'Escape') {
    e.preventDefault();
    closePhotoModal();
  } else if (e.key === 'ArrowLeft') {
    e.preventDefault();
    if (!isModalNavigating && currentPhotoIndex > 0) showPhoto(currentPhotoIndex - 1);
  } else if (e.key === 'ArrowRight') {
    e.preventDefault();
    if (!isModalNavigating && shuffledPhotoOrder && currentPhotoIndex < shuffledPhotoOrder.length - 1) showPhoto(currentPhotoIndex + 1);
  }
});

// Swipe –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –º–æ–¥–∞–ª–∫–µ
let modalTouchStartX = 0;
let modalTouchStartY = 0;

photoModal.addEventListener('touchstart', (e) => {
  if (!photoModal.classList.contains('active')) return;
  if (e.target && e.target.closest && e.target.closest('#photo-modal-close')) {
    e.stopPropagation();
    return;
  }
  modalTouchStartX = e.touches[0].clientX;
  modalTouchStartY = e.touches[0].clientY;
  showNavigationButtons();
});

photoModal.addEventListener('touchend', (e) => {
  if (!photoModal.classList.contains('active')) return;
  if (e.target && e.target.closest && e.target.closest('#photo-modal-close')) {
    e.stopPropagation();
    return;
  }
  if (isModalNavigating) return; // –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–≤–∞–π–ø—ã –ø–æ–∫–∞ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞
  const endX = e.changedTouches[0].clientX;
  const endY = e.changedTouches[0].clientY;
  const dx = endX - modalTouchStartX;
  const dy = endY - modalTouchStartY;
  if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 50) {
    if (dx < 0 && currentPhotoIndex < shuffledPhotoOrder.length - 1) {
      showPhoto(currentPhotoIndex + 1);
    } else if (dx > 0 && currentPhotoIndex > 0) {
      showPhoto(currentPhotoIndex - 1);
    }
  }
});

// –ü—Ä–µ—Ñ–µ—Ç—á –ø–µ—Ä–≤–æ–≥–æ full-image (–µ—Å–ª–∏ –µ—Å—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç)
(function prefetchFirstFull(){
  const run = () => {
    if (!Array.isArray(photosManifest) || photosManifest.length === 0) return;
    const href = photosManifest[0].full;
    const link = document.createElement('link');
    link.rel = 'prefetch';
    link.as = 'image';
    link.href = href;
    document.head.appendChild(link);
  };
  if ('requestIdleCallback' in window) requestIdleCallback(run, {timeout: 1500}); else setTimeout(run, 1200);
})();